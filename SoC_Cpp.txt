Abstraction means you're able to separate an objects externally visible behavior from its implementation.

Encapsulation means being able to hide the details of the implementation of an object (so closely related to abstraction that some authors treat them as one, leaving only three major requirements).

Modularity means being able to package abstractions into discrete units.

Hierarchy is a ranking or ordering of abstractions -- an ability to define the relationship between one abstraction and another.

---------SoC------------

Bootloader;
u-boot > widely used
Barebox > interesting

---------cpp compile--------
g++ -o test as.cpp
----------------------------

pg266


constexpr int


lval *= a -> lval = lval*a; also for /, %, +, –


The type{value} notation prevents narrowing (§3.9.2), but the
type(value) notation does not


-STATEMENTS



switch (unit) {//the value must be of integer, char, or enum type
case 'i':case 'b':
cout << length << "in == " << cm_per_inch*length << "cm\n";
break;
case 'c':
cout << length << "cm == " << length/cm_per_inch << "in\n";
break;
default:
cout << "Sorry, I don't know a unit called '" << unit << "'\n";
break;
}

vector<int> v = {5, 7, 9, 4, 6, 8};
vector<int> vi(6); // vector of 6 ints initialized to 0
v.size()
for (int x : v) // for each x in v
push_back()

Compile-time errors:
• Syntax errors
• Type errors
Link-time errors
*translation units
Run-time errors:
Logic errors:

One solution is to call keep_window_open()
from our std_lib_facilities.h at the end of main().


class Token {
public:
char kind; // what kind of token
double value; // for numbers: a value
};



